/**
 * Set up Checkstyle, PMD, Lint, Detekt, Ktlint and Spotless to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - checkstyle
 * - pmd
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.
 */
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.diffplug.spotless'
configurations {
    ktlint
    detekt
}
dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:8.39'
    ktlint "com.pinterest:ktlint:0.40.0"
    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.15.0'
}
def qualityConfigDir = "$project.rootDir/settings/codequality"
def reportsDir = "$project.rootDir/settings/reports"
def sourceDir = "$project.rootDir"
preBuild.dependsOn('spotlessApply','detekt')
assemble.dependsOn('lint')
check.dependsOn 'checkstyle', 'detekt', 'ktlint', 'ktlintFormat', 'pmd', 'spotlessApply', 'spotlessCheck'
gradle.taskGraph.afterTask { Task task, TaskState state ->
    println "Task Name => " + task.name
}
//CheckStyle
task checkstyle(type: Checkstyle, group: 'Verification', description: 'Runs code style checks') {
    showViolations = true
    configFile file("$qualityConfigDir/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": project(':').file("$qualityConfigDir/checkstyle/suppressions.xml")]
    source 'src'
    include '**/*.java'
    exclude '**/model/**'
    exclude '**/AppLogger.java'
    exclude '**/gen/**'
    exclude '**/test/**'
    exclude '**/androidTest/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.enabled = true
        html.enabled = true
        xml.setDestination(project.file("$reportsDir/checkstyle/checkstyle.xml"))
        html.setDestination(project.file("$reportsDir/checkstyle/checkstyle.html"))
    }
    //classpath = files()
    classpath = files("$sourceDir")
}
//Lint
android {
    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'NewApi', 'RestrictedApi', 'TypographyFractions', 'TypographyQuotes',
                "BinaryOperationInTimber", "LogNotTimber",
                "StringFormatInTimber", "ThrowableNotAtBeginning",
                "TimberArgCount", "TimberArgTypes",
                "TimberExceptionLogging", "TimberTagLength"
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        check 'InlinedApi', 'HandlerLeak'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        abortOnError true
        xmlReport true
        htmlReport true
        xmlOutput project.file("$reportsDir/lint/lints.xml")
        htmlOutput project.file("$reportsDir/lint/lints.html")
        lintConfig file("${qualityConfigDir}/lint/javalintrc.xml")
    }
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        jvmArgs '-noverify'
    }
}

//PMD
task pmd(type: Pmd, group: 'Verification', description: 'Inspect sourcecode for bugs') {
    ruleSetFiles = files("$qualityConfigDir/pmd/ruleset.xml")
    ignoreFailures = false
    ruleSets = []
    source fileTree('src/main/java')
    include '**/*.java'
    exclude('**/gen/**', '**/debug/**')
    exclude '**/model/**'
    reports {
        xml.enabled = true
        xml.setDestination(project.file("$reportsDir/pmd/pmd.xml"))
        html.enabled = true
        html.setDestination(project.file("$reportsDir/pmd/pmd.html"))
    }
}
//Kt Lint
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "--reporter=plain?group_by_file", "--reporter=checkstyle,output=${reportsDir}/ktlint/ktlint.xml",
            "--reporter=json,output=${reportsDir}/ktlint/ktlint.json",
            "--reporter=plain,output=${reportsDir}/ktlint/ktlint.txt", "src/**/*.kt"
}
check.dependsOn ktlint
task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "--reporter=plain?group_by_file", "--reporter=checkstyle,output=${reportsDir}/ktlint/format/ktlint.xml",
            "--reporter=json,output=${reportsDir}/ktlint/format/ktlint.json",
            "--reporter=plain,output=${reportsDir}/ktlint/format/ktlint.txt", "src/**/*.kt"
}
check.dependsOn ktlintFormat
//detekt
task detekt(type: JavaExec, group: 'verification') {
    main = "io.gitlab.arturbosch.detekt.cli.Main"
    classpath = configurations.detekt
    def input = "$sourceDir"
    def config = "$qualityConfigDir/detekt/detekt.yml"
    def filters = ".*test.*, .*/resources/.*"
    def params = ['-i', input, '-c', config, '-ex', filters]
    args(params)
}
check.dependsOn detekt
//spotless
spotless {
    kotlin {
        target "**/*.kt"
        trimTrailingWhitespace()
        indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
        licenseHeaderFile "$qualityConfigDir/spotless/copyright.kt"
    }
}